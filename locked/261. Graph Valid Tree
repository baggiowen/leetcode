Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

For example:

Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

Hint:

Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], what should your return? Is this case a valid tree? Show More Hint 
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

https://leetcode.com/discuss/questions/oj/graph-valid-tree

public class Solution {
    public boolean validTree(int n, int[][] edges) {
        int[] roots = new int[n];
        for (int i = 0; i < n; i++) {
            roots[i] = i;
        }
        
        for (int[] pos : edges) {
            int n1 = pos[0];
            int n2 = pos[1];
            int root1 = findRoot(roots, n1);
            int root2 = findRoot(roots, n2);
            if (root1 != root2) {
                roots[root1] = root2;
                n--;
            }
            if (root1 == root2) {
                return false;
            }
        }
        
        return n == 1;
    }
    
    private int findRoot(int[] roots, int num) {
        while (roots[num] != num) {
            roots[num] = roots[roots[num]]; // i don't understand
            num = roots[num];
        }
        return num;
    }
}
